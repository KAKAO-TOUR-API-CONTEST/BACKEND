plugins {
	id 'java'
	id 'war'
	id 'org.springframework.boot' version '3.3.1'
	id 'io.spring.dependency-management' version '1.1.5'
	id "com.ewerk.gradle.plugins.querydsl" version "1.0.10"
}

bootWar {
	enabled = true
}

configurations {
	compileOnly {
		extendsFrom annotationProcessor
	}
	querydsl
}

group = 'com.example'
version = '0.0.1-SNAPSHOT'

java {
	toolchain {
		languageVersion = JavaLanguageVersion.of(21)
	}
}


repositories {
	mavenCentral()
}

dependencies {
	// Swagger(Spring 3.x.x 이상부터 SpringFox 대신, SpringDoc)
	implementation 'org.springdoc:springdoc-openapi-starter-webmvc-ui:2.0.2'
	implementation 'org.springframework.boot:spring-boot-starter-data-jpa'

	// WEB
	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-tomcat'

	//JWT 의존성 추가
	implementation 'io.jsonwebtoken:jjwt-api:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-impl:0.11.2'
	implementation 'io.jsonwebtoken:jjwt-jackson:0.11.2'

	// graphQL 클래스, 인터페이스를 제공하는 라이브러리
	implementation 'com.graphql-java-kickstart:graphql-spring-boot-starter:11.0.0'
	implementation 'org.projectlombok:lombok:1.18.26'
	runtimeOnly 'com.graphql-java-kickstart:graphiql-spring-boot-starter:11.0.0'
	// graphQL 쿼리 요청에 사용되는 라이브러리
	implementation 'com.graphql-java-kickstart:playground-spring-boot-starter:11.0.0'

	compileOnly 'org.projectlombok:lombok'
	runtimeOnly 'com.mysql:mysql-connector-j'
	annotationProcessor 'org.projectlombok:lombok'
	testImplementation 'org.springframework.boot:spring-boot-starter-test'
	//testImplementation 'org.springframework.security:spring-security-test'
	testRuntimeOnly 'org.junit.platform:junit-platform-launcher'
	implementation 'io.awspring.cloud:spring-cloud-aws-starter-s3:3.1.1'

	implementation 'org.springframework.boot:spring-boot-starter-web'
	implementation 'org.springframework.boot:spring-boot-starter-websocket'

	implementation 'org.springframework.boot:spring-boot-starter-thymeleaf'
	implementation 'org.openapitools:jackson-databind-nullable:0.2.4'
	implementation 'com.fasterxml.jackson.datatype:jackson-datatype-jsr310:2.17.1'
	implementation 'org.springframework.cloud:spring-cloud-starter-aws:2.2.6.RELEASE'

	// QueryDSL
	implementation 'com.querydsl:querydsl-jpa:5.0.0:jakarta'
	annotationProcessor "com.querydsl:querydsl-apt:5.0.0:jakarta" // 수정
	annotationProcessor "jakarta.annotation:jakarta.annotation-api"
	annotationProcessor "jakarta.persistence:jakarta.persistence-api"

//	//kafka
//  implementation 'org.springframework.boot:spring-boot-starter-data-kafka'
//	implementation 'org.springframework.boot:spring-boot-starter-web'
//	implementation 'org.springframework.boot:spring-boot-starter'
//	testImplementation 'org.springframework.boot:spring-boot-starter-test'

//	//spark
	//implementation 'org.apache.spark:spark-core_2.12:3.3.1'
	//implementation 'org.apache.spark:spark-sql_2.12:3.3.1'
	//implementation 'org.apache.spark:spark-mllib_2.12:3.3.1'

}

def querydslDir = "$buildDir/generated/querydsl"

querydsl {
	jpa = true
	querydslSourcesDir = querydslDir
}
sourceSets {
	main.java.srcDir querydslDir
}
configurations {
	querydsl.extendsFrom compileClasspath
}
compileQuerydsl {
	options.annotationProcessorPath = configurations.querydsl
}
//querydsl 추가 끝

//--

tasks.named('test') {
	useJUnitPlatform()
}

//tasks.withType(JavaCompile) {
//	options.compilerArgs << "-parameters"
//}
// QueryDSL 빌드 옵션 (선택) ~
def querydslSrcDir = 'src/main/generated'
clean {
	delete file(querydslSrcDir)
}


tasks.withType(JavaCompile) {
	options.generatedSourceOutputDirectory = file(querydslSrcDir)
}